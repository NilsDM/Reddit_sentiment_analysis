"0",""
"0","# Return a list of all post names in a specific datable"
"0","# get_post_names <- function(df, subreddits){"
"0","#     p_names <- c(rep(0,10))"
"0","#     i = 1"
"0","#     "
"0","#     for(j in subreddits){"
"0","#         post_names_df <- df %>% #df %>%"
"0","#         select(post_name) %>% "
"0","#         distinct()"
"0","#     "
"0","#             p_names[i] = post_names_df[j]"
"0","#             i = i + 1"
"0","#         }"
"0","#     "
"0","#     return(p_names)"
"0","# Sentiment score of a given comment"
"0","    comment <- gsub(""[\r\n]"","" "", comment)"
"0","    comment <- gsub(""[\r\n\n]"","""", comment)"
"0","    comment <- str_replace_all(comment, ""[^[:alnum:]]"", "" "")"
"0","    sd <- get_nrc_sentiment(comment)"
"0","    return(round(num_score, 3))"
"0","}"
"0",""
"0","    if(-1 <= s & s <= -.5){"
"0","        return(""Negative"")"
"0","    }"
"0","    if(-.5 < s & s < -.1){"
"0","        return(""Neg-Neutral"")"
"0","    "
"0","    }"
"0","    "
"0","        return(""Pos-Neutral"")"
"0","    if(.5 <= s & s <= 1){"
"0","}"
"0","sample_comments_and_sentiment_analysis <- function(df){"
"0","    while(is.nan(comment_score)){"
"0","        comment_score <- calculate_sentiment_score(comment)"
"0","               sample_row$post_name,"
"0","               #sample_row$num_comments,"
"0","               sample_row$karma_ratio,"
"0","               sample_row$comment_karma,"
"0","}"
"0","# Constructs the sample sentiments data frame"
"0","# build_sample_sentiments_df <- function(df, subreddits){"
"0","#     post_names <- get_post_names(df, subreddits)"
"0","#                             post_name        = """","
"0","#                             post_karma_ratio = """","
"0","#                             comment_karma    = """","
"0","#     "
"0","#         current_df <- df %>% "
"0","#                              num_comments, karma, karma_ratio,"
"0","#         # loop for each top 5 post in current sub"
"0","#             sub_name <- subreddits[i] "
"0","#             post_name <- post_names[[i]][j]"
"0","#             # loop for each comment (30 total from each post from each sub) "
"0","#             sentiment_score <- sample_comments_and_sentiment_analysis(current_df) "
"0","#             return_df[counter,] = c(sentiment_score[1], "
"0","#                                     sentiment_score[3], "
"0","#                                     sentiment_score[4],"
"0","#                                     sentiment_score[6],"
"0","#                                     sentiment_score[8], "
"0","#                                     sentiment_score[9]"
"0","#             counter = counter + 1"
"0","#     }"
"0",""
"0",""
"0","# Useful for determining threshold above which comments are considered valid"
"0","calculate_median_karma_score <- function(df, sub, post){"
"0","        filter(subreddit == sub, "
"0","               post_name == post) %>% "
"0","           comment_median = median(comment_karma)) %>% "
"0","    "
"0","# Calculates the number of comments in a given post"
"0","calculate_number_of_comments <- function(df){"
"0","        select(subreddit, post_name, comment) %>% "
"0","        ungroup() %>% "
"0","    return(comment_counter)"
"0","# Separate unique post list into vectorized list separated by subreddit"
"0","vectorize_posts <- function(df, sub){"
"0","    filter(subreddit == sub) %>% "
"0","    head(21) "
"0","    "
"0",""
"0","construct_master_data_frame <- function(df, post_names_vector, sub){"
"0","    current_df <- df %>% "
"0","           comment_author, comment, comment_karma, id_tag)"
"0","    master_df <- data.frame(subreddit = """", post_name = """", karma = """", "
"0","                        comment_score = """",id_tag = """")"
"0","            current_df %>%"
"0","     "
"0","            sampled_comment <- sample_comments_and_sentiment_analysis(current_df_2)"
"0","                                     sampled_comment[[3]],"
"0","                                     sampled_comment[[6]],"
"0","                                     sampled_comment[[9]])"
"0","            counter = counter + 1"
"0","    }"
