"0",""
"0","# Sentiment score of a given comment"
"0","calculate_sentiment_score <- function(comment){"
"0","    comment <- gsub(""[\r\n]"","" "", comment)"
"0","    comment <- gsub(""[\r\n\n]"","""", comment)"
"0","    comment <- str_replace_all(comment, ""[^[:alnum:]]"", "" "")"
"0","    sd <- get_nrc_sentiment(comment)"
"0","    num_score <- (sd$positive - sd$negative) / (sd$positive + sd$negative)"
"0","    return(round(num_score, 3))"
"0","}"
"0",""
"0",""
"0","    if(-1 <= s & s <= -.5){"
"0","        return(""Negative"")"
"0","    }"
"0",""
"0","    if(-.5 < s & s < -.1){"
"0","        return(""Neg-Neutral"")"
"0","    }"
"0",""
"0","    if(-.1 <= s & s <= .1){"
"0","        return(""Neutral"")"
"0","    }"
"0",""
"0","    if(.1 < s & s < .5){"
"0","        return(""Pos-Neutral"")"
"0","    }"
"0","    if(.5 <= s & s <= 1){"
"0","        return(""Positive"")"
"0",""
"0","# Sample comment from given data frame and returns all attributes as a vector"
"0","sample_comments_and_sentiment_analysis <- function(df){"
"0","    blank_df <- data.frame(subreddit = character(),"
"0","                                post_name = character(),"
"0","                                karma = integer(),"
"0","                                karma_ratio = numeric(),"
"0","                                comment_author = character(),"
"0","                                comment = character(),"
"0","                                comment_karma = numeric(),"
"0","                                comment_score = numeric(),"
"0","                                id_tag = character())"
"0","    blank_df <- data.frame()"
"0","    for(i in 1:30){"
"0","        comment_score <- NaN"
"0","        while(is.nan(comment_score)){"
"0","        }"
"0","        result = c(sample_row$subreddit,"
"0","                   sample_row$post_name,"
"0","                   sample_row$karma,"
"0","                   sample_row$comment_author,"
"0","                   comment,"
"0","                   sample_row$comment_karma,"
"0","                   comment_score,"
"0","                   sample_row$id_tag)"
"0","        names(result) <- names(blank_df)"
"0","        blank_df = rbind(blank_df, result)"
"0","    }"
"0","    return(blank_df)"
"0","}"
"0",""
"0","# Calculates the number of comments in a given post"
"0","calculate_number_of_comments <- function(df){"
"0","    comment_counter <- df %>% "
"0","        select(subreddit, post_name, comment) %>% "
"0","        group_by(subreddit, post_name) %>% "
"0","        mutate(comment_count = n()) %>% "
"0","        ungroup() %>% "
"0","        select(subreddit, post_name, comment_count) %>% "
"0","        distinct() "
"0","    return(comment_counter)"
"0","}"
"0","# Separate unique post list into vectorized list separated by subreddit"
"0","vectorize_posts <- function(df, sub){"
"0","    post_names_df <- df %>% "
"0","    filter(subreddit == sub) %>% "
"0","    arrange(desc(comment_count)) %>% "
"0","    select(post_name) %>% "
"0","    head(21) "
"0","    result_vector <- as.vector(post_names_df)"
"0","    return(result_vector)"
"0","    "
"0","}"
"0",""
"0","# Function for binding data frames by day"
"0","data_frame_bind <- function(blank_df, master_df, n){"
"0","    for(i in n:(n + 2)){"
"0","        blank_df <- rbind(blank_df, master_df[[i]])"
"0","    }"
"0","    return(blank_df)"
"0","}"
"0",""
"0",""
"0","# Count unique posts"
"0","    group_by(subreddit) %>% "
"0","    mutate(post_count = n()) %>% "
"0","    ungroup() %>% "
"0","    select(subreddit, post_count) %>% "
"0","    distinct() %>% "
"0","    arrange(desc(post_count))"
"0","    return(df)"
"0","}"
"0","# Source: https://stackoverflow.com/questions/33524669/labeling-outliers-of-boxplots-in-r   "
"0","is_outlier <- function(x) {"
"0","  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))"
"0","}"
"0",""
"0",""
"0","# Build daily dataframe"
"0","sample_daily_dfs <- function(df, df_sampled_comments){"
"0","    for(i in 1:10){"
"0","        current_df <- "
"0","        df %>% "
"0","        filter(subreddit == subreddits[i]) %>% "
"0","        group_by(subreddit, post_name) %>% "
"0","        mutate(comment_count = n()) %>% "
"0","        ungroup() %>% "
"0","        filter(comment_count >= 30) %>% "
"0","        select(subreddit, post_name, karma,"
"0","               karma_ratio, comment_author,"
"0","               comment, comment_karma, id_tag)"
"0","    "
"0","        sampled_comments  <- sample_comments_and_sentiment_analysis(current_df)"
"0","        df_sampled_comments <- rbind(df_sampled_comments, sampled_comments)"
"0","    }"
"0","    return(df_sampled_comments)"
"0",""
"0",""
"0","# Feature engineering for sentiment binning and power user boolean"
"0","feature_engineering <- function(df){"
"0","    df <- df %>% "
"0","    mutate(is_power_user = "
"0","               ifelse(comment_author %in% power_users_vector, TRUE, FALSE), "
"0","           sentiment_bin = map(comment_score, sentiment_bin)) %>% "
"0","    rename(sentiment_score = comment_score)"
"0","    return(df)"
"0","}"
"0",""
"0",""
"0","# Plotting function "
"0","boxplot_plotting_with_dots <- function(df, sub = ""All days""){"
"0","    result <- df %>% "
"0","    ggplot(aes(x = subreddit, y = sentiment_score, group = subreddit)) + "
"0","    geom_boxplot(data = df, aes(fill = subreddit, alpha = 0.4),"
"0","    notch = FALSE, show.legend = FALSE, size = .3,"
"0","    colour = ""black"") +"
"0","    stat_summary(fun = ""mean"") + "
"0","    geom_jitter(color = ""black"", fill = ""white"", size = 1, alpha = 0.15) +"
"0","    labs("
"0","        caption  = ""Note: Big dot = Mean"" ,"
"0","        x        = ""SubReddits"","
"0","        y        = ""Sentiment"""
"0","    ) + theme_tq() + "
"0","    theme(axis.text.x   = element_text(angle = 45, vjust = 1, "
"0","                                       hjust=1, size = 12, face = ""bold""),"
"0","          axis.title.x  = element_text(size = 12, face = ""bold"", vjust = 10),"
"0","          axis.title.y  = element_text(size = 12, face = ""bold"")) "
"0","    return(result)"
"0","}"
"0",""
"0","# Conduct model adequacy checks"
"0","model_tests <- function(df, n){"
"0","    fitted <- df$fitted.values"
"0","    "
"0","    # Normality"
"0","    qqnorm(res) "
"0","    qqline(res, col = 2)"
"0","    print(shapiro.test(res))"
"0","    "
"0","    # Constant Variance"
"0","    plot(fitted, res, ylab = ""Residuals"",xlab = ""Fitted Values"", "
"0","         main = ""Constant Variance Test"") "
"0","    abline(h = 0, col = 4)"
"0","    "
