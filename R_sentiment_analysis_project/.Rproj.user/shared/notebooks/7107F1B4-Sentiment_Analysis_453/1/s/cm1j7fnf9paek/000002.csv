"0",""
"0","# Sentiment score of a given comment"
"0","calculate_sentiment_score <- function(comment){"
"0","    comment <- gsub(""[\r\n]"","" "", comment)"
"0","    comment <- gsub(""[\r\n\n]"","""", comment)"
"0","    comment <- str_replace_all(comment, ""[^[:alnum:]]"", "" "")"
"0","    num_score <- (sd$positive - sd$negative) / (sd$positive + sd$negative)"
"0","    return(round(num_score, 3))"
"0","}"
"0",""
"0",""
"0","# Bins a given sentiment score into 5 discrete bins"
"0","sentiment_bin <- function(s){"
"0","    if(-1 <= s & s <= -.5){"
"0","        return(""Negative"")"
"0","    "
"0","    if(-.5 < s & s < -.1){"
"0","    }"
"0","    "
"0","    if(-.1 <= s & s <= .1){"
"0","        return(""Neutral"")"
"0","    "
"0","    if(.1 < s & s < .5){"
"0","        return(""Pos-Neutral"")"
"0","    }"
"0","    if(.5 <= s & s <= 1){"
"0","        return(""Positive"")"
"0","}"
"0",""
"0","# Sample comment from given data frame and returns all attributes as a vector"
"0","sample_comments_and_sentiment_analysis <- function(df){"
"0","    blank_df <- data.frame(subreddit = character(),"
"0","                                post_name = character(),"
"0","                                karma_ratio = numeric(),"
"0","                                comment_author = character(),"
"0","                                comment = character(),"
"0","                                comment_karma = numeric(),"
"0","                                comment_score = numeric(),"
"0","    blank_df <- data.frame()"
"0","    for(i in 1:30){"
"0","        comment_score <- NaN"
"0","        while(is.nan(comment_score)){"
"0","            sample_row <- df[sample(1:nrow(df), 1, replace = FALSE), ] "
"0","            comment_score <- calculate_sentiment_score(comment)"
"0","        }"
"0","        result = c(sample_row$subreddit,"
"0","                   sample_row$post_name,"
"0","                   sample_row$karma_ratio,"
"0","                   sample_row$comment_author,"
"0","                   comment,"
"0","                   sample_row$comment_karma,"
"0","                   sample_row$id_tag)"
"0","        names(result) <- names(blank_df)"
"0","    }"
"0","    return(blank_df)"
"0","}"
"0",""
"0","# Calculates the average karma score for a given post"
"0","calculate_median_karma_score <- function(df, sub, post){"
"0","    filtered_df <- df %>% "
"0","        filter(subreddit == sub, "
"0","               post_name == post) %>% "
"0","    filter(comment_karma > comment_median) "
"0","    return(filtered_df)"
"0","    "
"0","}"
"0",""
"0","# Calculates the number of comments in a given post"
"0","calculate_number_of_comments <- function(df){"
"0","    comment_counter <- df %>% "
"0","        select(subreddit, post_name, comment) %>% "
"0","        group_by(subreddit, post_name) %>% "
"0","        mutate(comment_count = n()) %>% "
"0","        ungroup() %>% "
"0","        select(subreddit, post_name, comment_count) %>% "
"0","        distinct() "
"0","    return(comment_counter)"
"0",""
"0","# Separate unique post list into vectorized list separated by subreddit"
"0","vectorize_posts <- function(df, sub){"
"0","    filter(subreddit == sub) %>% "
"0","    arrange(desc(comment_count)) %>% "
"0","    select(post_name) %>% "
"0","    head(21) "
"0","    result_vector <- as.vector(post_names_df)"
"0","    return(result_vector)"
"0","    "
"0","}"
"0",""
"0","construct_master_data_frame <- function(df, post_names_vector, sub){"
"0","    "
"0","    # Filter down df to only those posts within the post_name_vector"
"0","    current_df <- df %>% "
"0","    filter(post_name %in% post_names_vector) %>% "
"0","    select(subreddit, post_name, karma, karma_ratio, "
"0","           comment_author, comment, comment_karma, id_tag)"
"0","    counter = 1"
"0","    master_df <- data.frame(subreddit = """", post_name = """", karma = """", "
"0","                        karma_ratio = """", comment_author = """","
"0","                        comment = """", comment_karma = """","
"0","                        comment_score = """",id_tag = """")"
"0",""
"0","    # Number of posts"
"0","    for(j in 1:4){"
"0","        current_df_2 <-"
"0","            current_df %>%"
"0","            # Filter out all comments that are not above the median karma"
"0","            calculate_median_karma_score(sub, post_names_vector[j])"
"0","        for(k in 1:30){"
"0","            sampled_comment <- sample_comments_and_sentiment_analysis(current_df_2)"
"0","                                     sampled_comment[[2]],"
"0","                                     sampled_comment[[3]],"
"0","                                     sampled_comment[[4]],"
"0","                                     sampled_comment[[5]],"
"0","                                     sampled_comment[[6]],"
"0","                                     sampled_comment[[7]],"
"0","            counter = counter + 1"
"0","        }"
"0","    }"
"0",""
"0","    return(master_df)"
"0","}"
"0","# Function for binding data frames by day"
"0","data_frame_bind <- function(blank_df, master_df, n){"
"0","    for(i in n:(n + 2)){"
"0","        blank_df <- rbind(blank_df, master_df[[i]])"
"0","    }"
"0","}"
"0",""
"0",""
"0","# Count unique posts"
"0","count_unique_posts <- function(df){"
"0","    group_by(subreddit) %>% "
"0","    mutate(post_count = n()) %>% "
"0","    ungroup() %>% "
"0","    select(subreddit, post_count) %>% "
"0","    distinct() %>% "
"0","    arrange(desc(post_count))"
"0","    return(df)"
"0","}"
"0","# Source: https://stackoverflow.com/questions/33524669/labeling-outliers-of-boxplots-in-r   "
"0","is_outlier <- function(x) {"
"0","  return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))"
"0","}"
"0",""
"0","sample_daily_dfs <- function(df, df_sampled_comments){"
"0","    for(i in 1:10){"
"0","        current_df <- "
"0","        filter(subreddit == subreddits[i]) %>% "
"0","        group_by(subreddit, post_name) %>% "
"0","        mutate(comment_count = n()) %>% "
"0","        ungroup() %>% "
"0","        filter(comment_count >= 30) %>% "
"0","        select(subreddit, post_name, karma,"
"0","               karma_ratio, comment_author,"
"0","               comment, comment_karma, id_tag)"
"0","    "
"0","        sampled_comments  <- sample_comments_and_sentiment_analysis(current_df)"
"0","        df_sampled_comments <- rbind(df_sampled_comments, sampled_comments)"
"0","    }"
"0",""
"0",""
"0","# Feature engineering for sentiment binning and power user boolean"
"0","feature_engineering <- function(df){"
"0","    df <- df %>% "
"0","           sentiment_bin = map(comment_score, sentiment_bin)) %>% "
"0","    rename(sentiment_score = comment_score)"
"0","    return(df)"
"0","}"
"0",""
"0","boxplot_plotting <- function(df, n){"
"0","    ggplot(aes(x = subreddit, y = sentiment_score, group = subreddit)) + "
"0","    geom_boxplot(data = df, aes(fill = subreddit, alpha = 0.4),"
"0","    notch = TRUE, show.legend = FALSE, size = .3,"
"0","    colour = ""black"") +"
"0","    stat_summary(fun = ""mean"") + "
"0","    labs("
"0","        subtitle = paste0(""Day"", n),"
"0","        caption  = ""Note: 'notch' = Median CI, Big dot = Mean"" ,"
"0","        x        = ""SubReddits"","
"0","        y        = ""Sentiment"""
"0","          axis.title.x  = element_text(size = 12, face = ""bold"", vjust = 10),"
"0","          axis.title.y  = element_text(size = 12, face = ""bold"")) "
"0","    return(result)"
"0","}"
"0",""
"0","    result <- df %>% "
"0","    ggplot(aes(x = subreddit, y = sentiment_score, group = subreddit)) + "
"0","    geom_boxplot(data = df, aes(fill = subreddit, alpha = 0.4),"
"0","    notch = TRUE, show.legend = FALSE, size = .3,"
"0","    colour = ""black"") +"
"0","    geom_jitter(color = ""black"", fill = ""white"", size = 1, alpha = 0.15) +"
"0","    labs("
"0","        title    = ""Sentiment Score Distribution"","
"0","        subtitle = paste0(""Day"", n),"
"0","        caption  = ""Note: 'notch' = Median CI, Big dot = Mean"" ,"
"0","        x        = ""SubReddits"","
"0","        y        = ""Sentiment"""
"0","    ) + theme_tq() + "
"0","    theme(axis.text.x   = element_text(angle = 45, vjust = 1, hjust=1, size = 12, face = ""bold""),"
"0","    return(result)"
"0","}"
